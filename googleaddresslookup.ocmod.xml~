<?xml version="1.0" encoding="UTF-8"?>
<modification>
	<name>Google Address Lookup</name>
	<version>3x</version>
	<code>Google Address Lookup</code>
	<author>Webx IT Solutions</author>
	<file path="catalog/controller/checkout/register.php">
		<operation>
			<search><![CDATA[public function index() {]]></search>
			<add position="after"><![CDATA[
				$data['module_google_lookup_status'] = $this->config->get('module_google_lookup_status');
				$data['module_google_lookup_apikey'] = $this->config->get('module_google_lookup_apikey');
				$data['module_google_lookup_map'] = $this->config->get('module_google_lookup_map');
				$data['showcregister'] = $this->config->get('module_google_lookup_showcregister');
			
				if($this->config->get('module_google_lookup_lng')){
					$data['module_google_lookup_lng'] = $this->config->get('module_google_lookup_lng');
				}else{
					$data['module_google_lookup_lng'] = '151.2195';
				}
				
				if($this->config->get('module_google_lookup_lat')){
					$data['module_google_lookup_lat'] = $this->config->get('module_google_lookup_lat');
				}else{
					$data['module_google_lookup_lat'] = '-33.8688';
				}
				
				if($this->config->get('module_google_lookup_zoom')){
					$data['module_google_lookup_zoom'] = $this->config->get('module_google_lookup_zoom');
				}else{
					$data['module_google_lookup_zoom'] = '10';
				}
			]]></add>
		</operation>
	</file>
		<file path="catalog/view/theme/*/template/checkout/register.twig">
						<operation>
			<search><![CDATA[<label class="control-label" for="input-payment-address-1">{{ entry_address_1 }}</label>]]></search>
				<add position="before"><![CDATA[
				<input type="text" name="lat" value="" style="display: none;" placeholder="" id="lat" class="form-control">
				<input type="text" name="lug" value="" style="display: none;" placeholder="" id="lug" class="form-control">
				<input type="text" name="warehouse" style="display: none;" value="" style="" placeholder="" id="warehouse" class="form-control">
				<input type="text" name="distance" style="display: none;" value="" style="" placeholder="" id="distance" class="form-control">
				]]></add> 
		</operation> 
 

		<operation>
			<search><![CDATA[<label class="control-label" for="input-payment-company">{{ entry_company }}</label>]]></search>
				<add position="replace"><![CDATA[]]></add> 
		</operation> 

		<operation>
			<search><![CDATA[<label class="control-label" for="input-payment-address-2">{{ entry_address_2 }}</label>]]></search>
				<add position="replace"><![CDATA[]]></add> 
		</operation> 


		<operation>
			<search><![CDATA[<input type="text" name="city" value="" placeholder="{{ entry_city }}" id="input-payment-city" class="form-control" />]]></search>
				<add position="replace"><![CDATA[<input type="text" disabled name="city" value="Jakarta" placeholder="Jakarta" id="input-payment-city" class="form-control" />]]></add> 
		</operation> 


		</file>
	<file path="catalog/view/theme/*/template/checkout/register.twig">

		<operation>
			<search><![CDATA[<fieldset id="address">]]></search>
			<add position="after"><![CDATA[
				{% if module_google_lookup_status and showcregister %}
				<style>
				  /* Always set the map height explicitly to define the size of the div
				   * element that contains the map. */
				  #map {
					height: 250px;
					width: 100%;
					margin-bottom:10px;
				  }
				  /* Optional: Makes the sample page fill the window. */
				  html, body {
					height: 100%;
					margin: 0;
					padding: 0;
				  }

				  #infowindow-content .title {
					font-weight: bold;
				  }

				  #infowindow-content {
					display: none;
				  }

				  #map #infowindow-content {
					display: inline;
				  }
				  #input-payment-company,#input-payment-address-2,.hide-me{
					  display: none;
				  }
				</style>
				
				<div id="map" {% if not module_google_lookup_map %}style="display:none;"{% endif %}></div>
				
				<div id="infowindow-content">
				  
				  <span id="place-name"  class="title"></span><br>
				  <span id="place-address"></span>
				</div>

      <div class="form-group">
        <label class="control-label" for="input-payment-company">Pencari Lokasi</label>
        <input type="text" name="company" value="" placeholder="google lokasi" id="pac-input" class="form-control" />
      </div>



				{% endif %}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$('#collapse-payment-address select[name=\'country_id\']').trigger('change');]]></search>
			<add position="after" offset="1"><![CDATA[
				{% if module_google_lookup_status and showcregister %}
			  <script>
				  // This example requires the Places library. Include the libraries=places
				  // parameter when you first load the API. For example:
				  // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
					 
				  function initMap() {
					var map = new google.maps.Map(document.getElementById('map'), {
					  center: {lat: {{ module_google_lookup_lat }}, lng: {{ module_google_lookup_lng }}},
					  zoom: {{ module_google_lookup_zoom }}
					});
					var card = document.getElementById('pac-card');
					var input = document.getElementById('pac-input');
					var types = document.getElementById('type-selector');
					var strictBounds = document.getElementById('strict-bounds-selector');

					map.controls[google.maps.ControlPosition.TOP_RIGHT].push(card);

					var autocomplete = new google.maps.places.Autocomplete(input);

					// Bind the map's bounds (viewport) property to the autocomplete object,
					// so that the autocomplete requests use the current map bounds for the
					// bounds option in the request.
					autocomplete.bindTo('bounds', map);

					var infowindow = new google.maps.InfoWindow();
					var infowindowContent = document.getElementById('infowindow-content');
					infowindow.setContent(infowindowContent);
					var marker = new google.maps.Marker({
					  map: map,
					  anchorPoint: new google.maps.Point(0, -29)
					});

					autocomplete.addListener('place_changed', function() {
					  infowindow.close();
					  marker.setVisible(false);
					  var place = autocomplete.getPlace();
					  
					  if (!place.geometry) {
						// User entered the name of a Place that was not suggested and
						// pressed the Enter key, or the Place Details request failed.
						window.alert("No details available for input: '" + place.name + "'");
						return;
					  }

					  // If the place has a geometry, then present it on a map.
					  if (place.geometry.viewport) {
						map.fitBounds(place.geometry.viewport);
					  } else {
						map.setCenter(place.geometry.location);
						map.setZoom(17);  // Why 17? Because it looks good.
					  }
					
					  marker.setPosition(place.geometry.location);
					  marker.setVisible(true);

					  var address = '';
					  if (place.address_components) {
						address = [
						  (place.address_components[0] && place.address_components[0].short_name || ','),
						  (place.address_components[1] && place.address_components[1].short_name || ','),
						  (place.address_components[2] && place.address_components[2].short_name || ',')
						].join(',');
					  }
					
					for (var i = 0; i < place.address_components.length; i++) {
					  var addressType = place.address_components[i].types[0];
					  
					  if(addressType == 'street_number'){
						var street_number = place.address_components[i].short_name;
					  }
					  
					   if(addressType == 'neighborhood'){
						var neighborhood = place.address_components[i].short_name;
					  }
					  
					  if(addressType == 'route'){
						var address_1 = place.address_components[i].short_name;
					  }
					  
					  if(addressType == 'sublocality_level_1'){
						var locality = place.address_components[i].short_name;
					  }

					  if(addressType == 'sublocality_level_2'){
						var locality2 = place.address_components[i].short_name;
					  }
					  
					  if(addressType == 'locality'){
							$('#input-payment-city').val(place.address_components[i].short_name); 
					  }
					  if(addressType == 'postal_code'){
						  $('#input-payment-postcode').val(place.address_components[i].short_name); 
					  }
					  
					  if(addressType == 'country'){
						  
						  $.ajax({
								url: 'index.php?route=extension/googlelookup/getcountry&countryname=' + place.address_components[i].long_name,
								dataType: 'json',
								success: function(json) {
									if(json['country']){
										$('#input-payment-country').val(json['country']['country_id']); 
										$('#input-payment-country').trigger('change'); 
									}
								},
							});
						}
						
						if(addressType == 'administrative_area_level_1'){
						   $.ajax({
								url: 'index.php?route=extension/googlelookup/getzone&zonename=' + place.address_components[i].long_name,
								dataType: 'json',
								success: function(json) {
									if(json['zone']){
										setTimeout(function(){
											$('#input-payment-zone').val(json['zone']['zone_id']); 
											$('#input-payment-zone').trigger('change'); 
										},1000);
										
									}
								},
							});
					  }
					 }
					 if(street_number == undefined){
						var street_number = '';
					 }else{
						 var street_number = street_number + ', ';
					 }
					 
					 
					 if(address_1 == undefined){
						var address_1 = '';
					 }else{
						 var address_1 = address_1 + ', ';
					 }
					 
					  if(neighborhood == undefined){
						var neighborhood = '';
					 }else{
						 var neighborhood = neighborhood + ', ';
					 }
					 
					 if(locality2 == undefined){
						var locality2 = '';
					 }else{
						 var locality2 = locality2 + ', ';
					 }
					 
					 if(locality == undefined){
						var locality = '';
					 }
					 
					 $('#input-payment-address-1').val(street_number + neighborhood + address_1 + locality2 + locality); 
					
					  
					  infowindowContent.children['place-name'].textContent = place.name;
					  infowindowContent.children['place-address'].textContent = address;
					  infowindow.open(map, marker);

					  console.log(marker.getPosition().lat())
					  console.log(marker.getPosition().lng())
					  console.log("============================")
					  $('#lat').val(marker.getPosition().lat())
					  $('#lug').val(marker.getPosition().lng())

						var wh = [];
						var myWh = [];
						var myToko = [];

						wh.push([100,["-6.219297177192735", "106.88658715770339"]])
						wh.push([102,["-6.308853095428582", "107.02462828407974"]])
						wh.push([103,["-6.220596326822474", "106.92041649757414"]])
						wh.push([104,["-6.244409512129108", "106.93435484583041"]])
						wh.push([105,["-6.258572681067194", "106.96885877916854"]])			
						wh.push([108,["-6.2680948824240055", "106.99480779651935"]])			
						wh.push([109,["-6.216183829739889", "106.76016172640904"]])			
								
					 for (let icount = 0; icount < wh.length; ++icount) {
						 var dist = distance(marker.getPosition().lat(), marker.getPosition().lng(), wh[icount][1][0], wh[icount][1][1],wh[icount][0], "K");
						myWh.push(dist);
						var key = wh[icount][0];
						myToko[dist]=key;
					 }
					  $('#warehouse').val(myToko[Math.min.apply(Math,myWh)]);
					  $('#distance').val(Math.min.apply(Math,myWh));






					});

					function distance(lat1, lon1, lat2, lon2,toko, unit) {
						var radlat1 = Math.PI * lat1/180
						var radlat2 = Math.PI * lat2/180
						var theta = lon1-lon2
						var radtheta = Math.PI * theta/180
						var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);
						dist = Math.acos(dist)
						dist = dist * 180/Math.PI
						dist = dist * 60 * 1.1515
						if (unit=="K") { dist = dist * 1.609344 }
						if (unit=="N") { dist = dist * 0.8684 } 
						console.log(dist)
						return dist
					}
				  }
				</script>
				<script src="https://maps.googleapis.com/maps/api/js?key={{ module_google_lookup_apikey }}&libraries=places&callback=initMap"
					async defer></script>
			{% endif %}
			]]></add>
		</operation>
	</file>
	<file path="catalog/controller/checkout/guest.php">
		<operation>
			<search><![CDATA[public function index() {]]></search>
			<add position="after"><![CDATA[
				$data['module_google_lookup_status'] = $this->config->get('module_google_lookup_status');
				$data['module_google_lookup_apikey'] = $this->config->get('module_google_lookup_apikey');
				$data['module_google_lookup_map'] = $this->config->get('module_google_lookup_map');
				$data['showcguest'] = $this->config->get('module_google_lookup_showcguest');
			
				if($this->config->get('module_google_lookup_lng')){
					$data['module_google_lookup_lng'] = $this->config->get('module_google_lookup_lng');
				}else{
					$data['module_google_lookup_lng'] = '151.2195';
				}
				
				if($this->config->get('module_google_lookup_lat')){
					$data['module_google_lookup_lat'] = $this->config->get('module_google_lookup_lat');
				}else{
					$data['module_google_lookup_lat'] = '-33.8688';
				}
				
				if($this->config->get('module_google_lookup_zoom')){
					$data['module_google_lookup_zoom'] = $this->config->get('module_google_lookup_zoom');
				}else{
					$data['module_google_lookup_zoom'] = '10';
				}
			]]></add>
		</operation>
	</file>
	<file path="catalog/view/theme/*/template/checkout/guest.twig">
		<operation>
			<search><![CDATA[<fieldset id="address">]]></search>
			<add position="before"><![CDATA[
				{% if module_google_lookup_status and showcguest %}
				<style>
				  /* Always set the map height explicitly to define the size of the div
				   * element that contains the map. */
				  #map {
					height: 250px;
					width: 100%;
					margin-bottom:10px;
				  }
				  /* Optional: Makes the sample page fill the window. */
				  html, body {
					height: 100%;
					margin: 0;
					padding: 0;
				  }

				  #infowindow-content .title {
					font-weight: bold;
				  }

				  #infowindow-content {
					display: none;
				  }

				  #map #infowindow-content {
					display: inline;
				  }
				</style>
				<div id="map" {% if not module_google_lookup_map %}style="display:none;"{% endif %}></div>
				<div id="infowindow-content">
				  
				  <span id="place-name"  class="title"></span><br>
				  <span id="place-address"></span>
				</div>
				<div id="pac-container">
				   <div class="input-group">
						<span class="input-group-addon"><i class="fa fa-map-marker"></i></span>
						 <input id="pac-input" type="text" class="form-control" placeholder="Enter a location">
					</div>
				</div>
				{% endif %}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$('#collapse-payment-address select[name=\'country_id\']').trigger('change');]]></search>
			<add position="after" offset="1"><![CDATA[
				{% if module_google_lookup_status and showcguest %}
			  <script>
				  // This example requires the Places library. Include the libraries=places
				  // parameter when you first load the API. For example:
				  // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

				  function initMap() {
					var map = new google.maps.Map(document.getElementById('map'), {
					  center: {lat: {{ module_google_lookup_lat }}, lng: {{ module_google_lookup_lng }}},
					  zoom: {{ module_google_lookup_zoom }}
					});
					var card = document.getElementById('pac-card');
					var input = document.getElementById('pac-input');
					var types = document.getElementById('type-selector');
					var strictBounds = document.getElementById('strict-bounds-selector');

					map.controls[google.maps.ControlPosition.TOP_RIGHT].push(card);

					var autocomplete = new google.maps.places.Autocomplete(input);

					// Bind the map's bounds (viewport) property to the autocomplete object,
					// so that the autocomplete requests use the current map bounds for the
					// bounds option in the request.
					autocomplete.bindTo('bounds', map);

					var infowindow = new google.maps.InfoWindow();
					var infowindowContent = document.getElementById('infowindow-content');
					infowindow.setContent(infowindowContent);
					var marker = new google.maps.Marker({
					  map: map,
					  anchorPoint: new google.maps.Point(0, -29)
					});

					autocomplete.addListener('place_changed', function() {
					  infowindow.close();
					  marker.setVisible(false);
					  var place = autocomplete.getPlace();
					  
					  if (!place.geometry) {
						// User entered the name of a Place that was not suggested and
						// pressed the Enter key, or the Place Details request failed.
						window.alert("No details available for input: '" + place.name + "'");
						return;
					  }

					  // If the place has a geometry, then present it on a map.
					  if (place.geometry.viewport) {
						map.fitBounds(place.geometry.viewport);
					  } else {
						map.setCenter(place.geometry.location);
						map.setZoom(17);  // Why 17? Because it looks good.
					  }
					
					  marker.setPosition(place.geometry.location);
					  marker.setVisible(true);

					  var address = '';
					  if (place.address_components) {
						address = [
						  (place.address_components[0] && place.address_components[0].short_name || ','),
						  (place.address_components[1] && place.address_components[1].short_name || ','),
						  (place.address_components[2] && place.address_components[2].short_name || ',')
						].join(',');
					  }
					
					for (var i = 0; i < place.address_components.length; i++) {
					  var addressType = place.address_components[i].types[0];
					  
					  if(addressType == 'street_number'){
						var street_number = place.address_components[i].short_name;
					  }
					  
					   if(addressType == 'neighborhood'){
						var neighborhood = place.address_components[i].short_name;
					  }
					  
					  if(addressType == 'route'){
						var address_1 = place.address_components[i].short_name;
					  }
					  
					  if(addressType == 'sublocality_level_2'){
						var locality2 = place.address_components[i].short_name;
					  }
					  
					  if(addressType == 'sublocality_level_1'){
						var locality = place.address_components[i].short_name;
					  }
					  
					  if(addressType == 'locality'){
							$('#input-payment-city').val(place.address_components[i].short_name); 
					  }
					  if(addressType == 'postal_code'){
						  $('#input-payment-postcode').val(place.address_components[i].short_name); 
					  }
					  
					  if(addressType == 'country'){
						  
						  $.ajax({
								url: 'index.php?route=extension/googlelookup/getcountry&countryname=' + place.address_components[i].long_name,
								dataType: 'json',
								success: function(json) {
									if(json['country']){
										$('#input-payment-country').val(json['country']['country_id']); 
										$('#input-payment-country').trigger('change'); 
									}
								},
							});
						}
						
						if(addressType == 'administrative_area_level_1'){
						   $.ajax({
								url: 'index.php?route=extension/googlelookup/getzone&zonename=' + place.address_components[i].long_name,
								dataType: 'json',
								success: function(json) {
									if(json['zone']){
										setTimeout(function(){
											$('#input-payment-zone').val(json['zone']['zone_id']); 
											$('#input-payment-zone').trigger('change'); 
										},1000);
										
									}
								},
							});
					  }
					 }
					 if(street_number == undefined){
						var street_number = '';
					 }else{
						 var street_number = street_number + ', ';
					 }
					 
					 
					 if(address_1 == undefined){
						var address_1 = '';
					 }else{
						 var address_1 = address_1 + ', ';
					 }
					 
					 if(locality2 == undefined){
						var locality2 = '';
					 }else{
						 var locality2 = locality2 + ', ';
					 }
					 
					  if(neighborhood == undefined){
						var neighborhood = '';
					 }else{
						 var neighborhood = neighborhood + ', ';
					 }
					 
					 if(locality == undefined){
						var locality = '';
					 }
					 
					 $('#input-payment-address-1').val(street_number + neighborhood + address_1 + locality2 + locality); 
					 
					  
					  infowindowContent.children['place-name'].textContent = place.name;
					  infowindowContent.children['place-address'].textContent = address;
					  infowindow.open(map, marker);
					});
				  }
				</script>
				<script src="https://maps.googleapis.com/maps/api/js?key={{ module_google_lookup_apikey }}&libraries=places&callback=initMap"
					async defer></script>
			{% endif %}
			]]></add>
		</operation>
	</file>
	<file path="catalog/controller/account/address.php">
		<operation>
			<search><![CDATA[$data['back'] = $this->url->link('account/address', '', true);]]></search>
			<add position="before"><![CDATA[
				$data['module_google_lookup_status'] = $this->config->get('module_google_lookup_status');
				$data['module_google_lookup_apikey'] = $this->config->get('module_google_lookup_apikey');
				$data['module_google_lookup_map'] = $this->config->get('module_google_lookup_map');
				$data['module_google_lookup_editaddress'] = $this->config->get('module_google_lookup_editaddress');
				
				$arrContextOptions=array(
					"ssl"=>array(
						"verify_peer"=>false,
						"verify_peer_name"=>false,
					),
				);  
				
				$alladdress = $data['address_1'].''.$data['city'].''.$data['country_id'].''.$data['zone_id'].''.$data['postcode'];
				$alladdresss = urlencode($alladdress);
				$editaddress = file_get_contents("https://maps.googleapis.com/maps/api/geocode/json?address=".$alladdresss."&key=AIzaSyDCimVyQS_-hujRwoftghq3DrE9yZ7RLno", false, stream_context_create($arrContextOptions));
				
				$addressdata = json_decode($editaddress,true);
				
				if(!empty($addressdata['results'])){
					$data['lat'] = $addressdata['results'][0]['geometry']['location']['lat'];
					$data['lng'] = $addressdata['results'][0]['geometry']['location']['lng'];
				}else{
					$data['lat'] = 0.0;
					$data['lng'] = 0.0;
				}

 


				 
				 
			]]></add>
		</operation>
	</file> 
	<file path="catalog/view/theme/*/template/account/address_form.twig">
			<operation>
			<search><![CDATA[<input type="text" name="postcode" value="{{ postcode }}" placeholder="{{ entry_postcode }}" id="input-postcode" class="form-control" />]]></search>
				<add position="before"><![CDATA[
				<input type="text" name="lat" value="" style="display: none;" placeholder="" id="lat" class="form-control">
				<input type="text" name="lug" value="" style="display: none;" placeholder="" id="lug" class="form-control">
				<input type="text" name="warehouse" style="display: none;" value="" style="" placeholder="" id="warehouse" class="form-control">
				<input type="text" name="distance" style="display: none;" value="" style="" placeholder="" id="distance" class="form-control">
				]]></add> 
		</operation> 
		</file>
		<file path="catalog/view/theme/*/template/account/address_form.twig">
		<operation>
			<search><![CDATA[{{ footer }}]]></search>
			<add position="before"><![CDATA[
				{% if module_google_lookup_status and module_google_lookup_editaddress %}
			  <script>
				  // This example requires the Places library. Include the libraries=places
				  // parameter when you first load the API. For example:
				  // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
				var markers = [];
				  function initMap() {
					  
					var uluru = {lat: {{ lat }}, lng: {{ lng }}};
					var map = new google.maps.Map(document.getElementById('map'), {
					  zoom: 17,
					  center: {lat: {{ lat }}, lng: {{ lng }}},
					});
					
					var marker = new google.maps.Marker({
						position: uluru,
						map: map,
						anchorPoint: new google.maps.Point(0, -29)
					});
					
					markers.push(marker);
				  
				   var card = document.getElementById('pac-card');
					var input = document.getElementById('pac-input');
					var types = document.getElementById('type-selector');
					var strictBounds = document.getElementById('strict-bounds-selector');
				   
					map.controls[google.maps.ControlPosition.TOP_RIGHT].push(card);

					var autocomplete = new google.maps.places.Autocomplete(input);
					
					// Bind the map's bounds (viewport) property to the autocomplete object,
					// so that the autocomplete requests use the current map bounds for the
					// bounds option in the request.
					autocomplete.bindTo('bounds', map);
					
					var infowindow = new google.maps.InfoWindow();
					var infowindowContent = document.getElementById('infowindow-content');
					infowindow.setContent(infowindowContent);
					
					var marker = new google.maps.Marker({
					  map: map,
					  anchorPoint: new google.maps.Point(0, -29)
					});

					autocomplete.addListener('place_changed', function() {
					  setMapOnAll(null);
					 infowindow.close();
					  marker.setVisible(false);
					  var place = autocomplete.getPlace();
					  
					  if (!place.geometry) {
						// User entered the name of a Place that was not suggested and
						// pressed the Enter key, or the Place Details request failed.
						window.alert("No details available for input: '" + place.name + "'");
						return;
					  }

					  // If the place has a geometry, then present it on a map.
					  if (place.geometry.viewport) {
						map.fitBounds(place.geometry.viewport);
					  } else {
						map.setCenter(place.geometry.location);
						map.setZoom(17);  // Why 17? Because it looks good.
					  }
					
					  marker.setPosition(place.geometry.location);
					  marker.setVisible(true);

					  var address = '';
					  if (place.address_components) {
						  console.log(place.address_components)
						address = [
						  (place.address_components[0] && place.address_components[0].short_name || ','),
						  (place.address_components[1] && place.address_components[1].short_name || ','),
						  (place.address_components[2] && place.address_components[2].short_name || ',')
						].join(',');
					  }
					
					for (var i = 0; i < place.address_components.length; i++) {
					  var addressType = place.address_components[i].types[0];
					  
					  if(addressType == 'street_number'){
						var street_number = place.address_components[i].short_name;
					  }
					  
					  if(addressType == 'neighborhood'){
						var neighborhood = place.address_components[i].short_name;
					  }
					  
					  if(addressType == 'route'){
						var address_1 = place.address_components[i].short_name;
					  }
					  
					  if(addressType == 'sublocality_level_1'){
						var locality = place.address_components[i].short_name;
					  }
					  
					  if(addressType == 'sublocality_level_2'){
						var locality2 = place.address_components[i].short_name;
					  }
					  
					  if(addressType == 'locality'){
							$('#input-city').val(place.address_components[i].short_name); 
					  }
					  if(addressType == 'postal_code'){
						  $('#input-postcode').val(place.address_components[i].short_name); 
					  }
					  
					  if(addressType == 'country'){
						  
						  $.ajax({
								url: 'index.php?route=extension/googlelookup/getcountry&countryname=' + place.address_components[i].long_name,
								dataType: 'json',
								success: function(json) {
									if(json['country']){
										$('#input-country').val(json['country']['country_id']); 
										$('#input-country').trigger('change'); 
									}
								},
							});
						}
						
						if(addressType == 'administrative_area_level_1'){
						   $.ajax({
								url: 'index.php?route=extension/googlelookup/getzone&zonename=' + place.address_components[i].long_name,
								dataType: 'json',
								success: function(json) {
									if(json['zone']){
										setTimeout(function(){
											$('#input-zone').val(json['zone']['zone_id']); 
											$('#input-zone').trigger('change'); 
										},1000);
										
									}
								},
							});
					  }
					 }
					 if(street_number == undefined){
						var street_number = '';
					 }else{
						 var street_number = street_number + ', ';
					 }
					 
					 if(neighborhood == undefined){
						var neighborhood = '';
					 }else{
						 var neighborhood = neighborhood + ', ';
					 }
					 
					  if(locality2 == undefined){
						var locality2 = '';
					 }else{
						 var locality2 = locality2 + ', ';
					 }
					 
					 if(address_1 == undefined){
						var address_1 = '';
					 }else{
						 var address_1 = address_1 + ', ';
					 }
					 if(locality == undefined){
						var locality = '';
					 }
					 
					 $('#input-address-1').val(place.name+', ' + street_number + neighborhood + address_1 + locality2 + locality); 		 
					  
					  infowindowContent.children['place-name'].textContent = place.name;
					  infowindowContent.children['place-address'].textContent = place.name+', '+address;
					  infowindow.open(map, marker);
					  console.log(marker.getPosition().lat())
					  console.log(marker.getPosition().lng())
					  console.log("============================")
					  $('#lat').val(marker.getPosition().lat())
					  $('#lug').val(marker.getPosition().lng())

						var wh = [];
						var myWh = [];
						var myToko = [];

						wh.push([100,["-6.219297177192735", "106.88658715770339"]])
						wh.push([102,["-6.308853095428582", "107.02462828407974"]])
						wh.push([103,["-6.220596326822474", "106.92041649757414"]])
						wh.push([104,["-6.244409512129108", "106.93435484583041"]])
						wh.push([105,["-6.258572681067194", "106.96885877916854"]])			
						wh.push([108,["-6.2680948824240055", "106.99480779651935"]])			
						wh.push([109,["-6.216183829739889", "106.76016172640904"]])			
								
					 for (let icount = 0; icount < wh.length; ++icount) {
						 var dist = distance(marker.getPosition().lat(), marker.getPosition().lng(), wh[icount][1][0], wh[icount][1][1],wh[icount][0], "K");
						myWh.push(dist);
						var key = wh[icount][0];
						myToko[dist]=key;
					 }
					  $('#warehouse').val(myToko[Math.min.apply(Math,myWh)]);
					  $('#distance').val(Math.min.apply(Math,myWh));
					});
				} 
				function setMapOnAll(map) {
					for (var i = 0; i < markers.length; i++) {
					  markers[i].setMap(map);
					  
					}
				}
 


  
				function distance(lat1, lon1, lat2, lon2,toko, unit) {
					var radlat1 = Math.PI * lat1/180
					var radlat2 = Math.PI * lat2/180
					var theta = lon1-lon2
					var radtheta = Math.PI * theta/180
					var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);
					dist = Math.acos(dist)
					dist = dist * 180/Math.PI
					dist = dist * 60 * 1.1515
					if (unit=="K") { dist = dist * 1.609344 }
					if (unit=="N") { dist = dist * 0.8684 } 

					return dist
				}
				
				  
				</script>
				
				<script src="https://maps.googleapis.com/maps/api/js?key={{ module_google_lookup_apikey }}&libraries=places&callback=initMap"
					async defer></script>
			{% endif %}
			]]></add>
		</operation>
	<operation>
			<search><![CDATA[<form action="{{ action }}" method="post" enctype="multipart/form-data" class="form-horizontal">]]></search>
			<add position="after"><![CDATA[
				{% if module_google_lookup_status and module_google_lookup_editaddress %}
				  <style>
				  /* Always set the map height explicitly to define the size of the div
				   * element that contains the map. */
				  #map {
					height: 250px;
					width: 100%;
					margin-bottom:10px;
				  }
				  /* Optional: Makes the sample page fill the window. */
				  html, body {
					height: 100%;
					margin: 0;
					padding: 0;
				  }

				  #infowindow-content .title {
					font-weight: bold;
				  }

				  #infowindow-content {
					display: none;
				  }

				  #map #infowindow-content {
					display: inline;
				  }
				</style>
				<div id="map" {% if not module_google_lookup_map %}style="display:none;"{% endif %}></div>
				<div id="infowindow-content">
				  <span id="place-name"  class="title"></span><br>
				  <span id="place-address"></span>
				</div>
				<div id="pac-container">
					<div class="input-group" style="margin-bottom:10px;">
						<span class="input-group-addon"><i class="fa fa-map-marker"></i></span>
						 <input id="pac-input" type="text" class="form-control" placeholder="Enter a location">
					</div>
				</div>
				{% endif %}
			]]></add>
		</operation>
	</file>
	<file path="catalog/controller/checkout/payment_address.php">
		<operation>
			<search><![CDATA[public function index() {]]></search>
			<add position="after"><![CDATA[
				$data['module_google_lookup_status'] = $this->config->get('module_google_lookup_status');
				$data['module_google_lookup_apikey'] = $this->config->get('module_google_lookup_apikey');
				$data['module_google_lookup_map'] = $this->config->get('module_google_lookup_map');
				$data['payment_add'] = $this->config->get('module_google_lookup_payment_add');
				
				if($this->config->get('module_google_lookup_lng')){
					$data['module_google_lookup_lng'] = $this->config->get('module_google_lookup_lng');
				}else{
					$data['module_google_lookup_lng'] = '151.2195';
				}
				
				if($this->config->get('module_google_lookup_lat')){
					$data['module_google_lookup_lat'] = $this->config->get('module_google_lookup_lat');
				}else{
					$data['module_google_lookup_lat'] = '-33.8688';
				}
				
				if($this->config->get('module_google_lookup_zoom')){
					$data['module_google_lookup_zoom'] = $this->config->get('module_google_lookup_zoom');
				}else{
					$data['module_google_lookup_zoom'] = '10';
				}
			]]></add>
		</operation>
	</file>
	<file path="catalog/view/theme/*/template/checkout/payment_address.twig">
		<operation>
			<search><![CDATA[<div id="payment-new" style="display: {% if addresses %}none{% else %}block{% endif %};">]]></search>
			<add position="after"><![CDATA[
				{% if module_google_lookup_status and payment_add %}
			  <style>
				  /* Always set the map height explicitly to define the size of the div
				   * element that contains the map. */
				  #map {
					height: 250px;
					width: 100%;
					margin-bottom:10px;
				  }
				  /* Optional: Makes the sample page fill the window. */
				  html, body {
					height: 100%;
					margin: 0;
					padding: 0;
				  }

				  #infowindow-content .title {
					font-weight: bold;
				  }

				  #infowindow-content {
					display: none;
				  }

				  #map #infowindow-content {
					display: inline;
				  }
				</style>
				<div id="map" {% if not module_google_lookup_map %}style="display:none;"{% endif %}></div>
				<div id="infowindow-content">
				  
				  <span id="place-name"  class="title"></span><br>
				  <span id="place-address"></span>
				</div>
				<div id="pac-container">
					<div class="input-group" style="margin-bottom:10px;">
						<span class="input-group-addon"><i class="fa fa-map-marker"></i></span>
						 <input id="pac-input" type="text" class="form-control" placeholder="Enter a location">
					</div>
				</div>
			{% endif %}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$('#collapse-payment-address select[name=\'country_id\']').trigger('change');]]></search>
			<add position="after" offset="1"><![CDATA[
				{% if module_google_lookup_status and payment_add %}
			  <script>
				  // This example requires the Places library. Include the libraries=places
				  // parameter when you first load the API. For example:
				  // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
				 
				  function initMap() {
					var map = new google.maps.Map(document.getElementById('map'), {
					  center: {lat: {{ module_google_lookup_lat }}, lng: {{ module_google_lookup_lng }}},
					  zoom: {{ module_google_lookup_zoom }}
					});
					var card = document.getElementById('pac-card');
					var input = document.getElementById('pac-input');
					var types = document.getElementById('type-selector');
					var strictBounds = document.getElementById('strict-bounds-selector');

					map.controls[google.maps.ControlPosition.TOP_RIGHT].push(card);

					var autocomplete = new google.maps.places.Autocomplete(input);

					// Bind the map's bounds (viewport) property to the autocomplete object,
					// so that the autocomplete requests use the current map bounds for the
					// bounds option in the request.
					autocomplete.bindTo('bounds', map);

					var infowindow = new google.maps.InfoWindow();
					var infowindowContent = document.getElementById('infowindow-content');
					infowindow.setContent(infowindowContent);
					var marker = new google.maps.Marker({
					  map: map,
					  anchorPoint: new google.maps.Point(0, -29)
					});

					autocomplete.addListener('place_changed', function() {
					  infowindow.close();
					  marker.setVisible(false);
					  var place = autocomplete.getPlace();
					  
					  if (!place.geometry) {
						// User entered the name of a Place that was not suggested and
						// pressed the Enter key, or the Place Details request failed.
						window.alert("No details available for input: '" + place.name + "'");
						return;
					  }

					  // If the place has a geometry, then present it on a map.
					  if (place.geometry.viewport) {
						map.fitBounds(place.geometry.viewport);
					  } else {
						map.setCenter(place.geometry.location);
						map.setZoom(17);  // Why 17? Because it looks good.
					  }
					
					  marker.setPosition(place.geometry.location);
					  marker.setVisible(true);

					  var address = '';
					  if (place.address_components) {
						address = [
						  (place.address_components[0] && place.address_components[0].short_name || ','),
						  (place.address_components[1] && place.address_components[1].short_name || ','),
						  (place.address_components[2] && place.address_components[2].short_name || ',')
						].join(',');
					  }
					
					for (var i = 0; i < place.address_components.length; i++) {
					  var addressType = place.address_components[i].types[0];
					  
					  if(addressType == 'street_number'){
						var street_number = place.address_components[i].short_name;
					  }
					  
					  if(addressType == 'neighborhood'){
						var neighborhood = place.address_components[i].short_name;
					  }
					  
					  if(addressType == 'route'){
						var address_1 = place.address_components[i].short_name;
					  }

					  if(addressType == 'sublocality_level_1'){
						var locality = place.address_components[i].short_name;
					  }
					  
					  if(addressType == 'sublocality_level_2'){
						var locality2 = place.address_components[i].short_name;
					  }
					  
					  if(addressType == 'locality'){
							$('#input-payment-city').val(place.address_components[i].short_name); 
					  }
					  if(addressType == 'postal_code'){
						  $('#input-payment-postcode').val(place.address_components[i].short_name); 
					  }
					  
					  if(addressType == 'country'){
						  
						  $.ajax({
								url: 'index.php?route=extension/googlelookup/getcountry&countryname=' + place.address_components[i].long_name,
								dataType: 'json',
								success: function(json) {
									if(json['country']){
										$('#input-payment-country').val(json['country']['country_id']); 
										$('#input-payment-country').trigger('change'); 
									}
								},
							});
						}
						
						if(addressType == 'administrative_area_level_1'){
						   $.ajax({
								url: 'index.php?route=extension/googlelookup/getzone&zonename=' + place.address_components[i].long_name,
								dataType: 'json',
								success: function(json) {
									if(json['zone']){
										setTimeout(function(){
											$('#input-payment-zone').val(json['zone']['zone_id']); 
											$('#input-payment-zone').trigger('change'); 
										},1000);
										
									}
								},
							});
					  }
					 }
					 if(street_number == undefined){
						var street_number = '';
					 }else{
						 var street_number = street_number + ', ';
					 }
					 
					 
					 if(neighborhood == undefined){
						var neighborhood = '';
					 }else{
						 var neighborhood = neighborhood + ', ';
					 }
					 
					 if(address_1 == undefined){
						var address_1 = '';
					 }else{
						 var address_1 = address_1 + ', ';
					 }
					 
					  if(locality2 == undefined){
						var locality2 = '';
					 }else{
						 var locality2 = locality2 + ', ';
					 }
					 
					 if(locality == undefined){
						var locality = '';
					 }
					 
					 $('#input-payment-address-1').val(street_number + neighborhood + address_1 + locality2 + locality);
					
					  
					  infowindowContent.children['place-name'].textContent = place.name;
					  infowindowContent.children['place-address'].textContent = address;
					  infowindow.open(map, marker);
					});

				  }
				</script>
				<script src="https://maps.googleapis.com/maps/api/js?key={{ module_google_lookup_apikey }}&libraries=places&callback=initMap"
					async defer></script>
			{% endif %}
			]]></add>
		</operation>
	</file>
	<file path="catalog/controller/checkout/shipping_address.php">
		<operation>
			<search><![CDATA[public function index() {]]></search>
			<add position="after"><![CDATA[
				$data['module_google_lookup_status'] = $this->config->get('module_google_lookup_status');
				$data['module_google_lookup_apikey'] = $this->config->get('module_google_lookup_apikey');
				$data['module_google_lookup_map'] = $this->config->get('module_google_lookup_map');
				$data['shipping_add'] = $this->config->get('module_google_lookup_shipping_add');
				
				if($this->config->get('module_google_lookup_lng')){
					$data['module_google_lookup_lng'] = $this->config->get('module_google_lookup_lng');
				}else{
					$data['module_google_lookup_lng'] = '151.2195';
				}
				
				if($this->config->get('module_google_lookup_lat')){
					$data['module_google_lookup_lat'] = $this->config->get('module_google_lookup_lat');
				}else{
					$data['module_google_lookup_lat'] = '-33.8688';
				}
				
				if($this->config->get('module_google_lookup_zoom')){
					$data['module_google_lookup_zoom'] = $this->config->get('module_google_lookup_zoom');
				}else{
					$data['module_google_lookup_zoom'] = '10';
				}
			]]></add>
		</operation>
	</file>
	<file path="catalog/view/theme/*/template/checkout/shipping_address.twig">
		<operation>
			<search><![CDATA[<div id="shipping-new" style="display: {% if addresses %}none{% else %}block{% endif %};">]]></search>
			<add position="after"><![CDATA[
				{% if module_google_lookup_status and shipping_add %}
			  <style>
				  /* Always set the map height explicitly to define the size of the div
				   * element that contains the map. */
				  #map1 {
					height: 250px;
					width: 100%;
				  }
				  /* Optional: Makes the sample page fill the window. */
				  html, body {
					height: 100%;
					margin: 0;
					padding: 0;
				  }

				  #infowindow-content .title {
					font-weight: bold;
				  }

				  #infowindow-content {
					display: none;
				  }

				  #map1 #infowindow-content {
					display: inline;
				  }
				</style>
				<div id="map1" {% if not module_google_lookup_map %}style="display:none;"{% endif %}></div>
				<div id="infowindow-content">
				   
				  <span id="place-name"  class="title"></span><br>
				  <span id="place-address"></span>
				</div>
				<div id="pac-container">
					<div class="input-group" style="margin-bottom:10px;">
						<span class="input-group-addon"><i class="fa fa-map-marker"></i></span>
						 <input id="pac-input1" type="text" class="form-control" placeholder="Enter a location">
					</div>
				</div>
			{% endif %}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$('#collapse-shipping-address select[name=\'country_id\']').trigger('change');]]></search>
			<add position="after" offset="1"><![CDATA[
				{% if module_google_lookup_status and shipping_add %}
			  <script>
				  // This example requires the Places library. Include the libraries=places
				  // parameter when you first load the API. For example:
				  // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
 
				  function initshippingMap() {
					var map = new google.maps.Map(document.getElementById('map1'), {
					  center: {lat: {{ module_google_lookup_lat }}, lng: {{ module_google_lookup_lng }}},
					  zoom: {{ module_google_lookup_zoom }}
					});
					var card = document.getElementById('pac-card');
					var input = document.getElementById('pac-input1');
					var types = document.getElementById('type-selector');
					var strictBounds = document.getElementById('strict-bounds-selector');

					map.controls[google.maps.ControlPosition.TOP_RIGHT].push(card);

					var autocomplete = new google.maps.places.Autocomplete(input);

					// Bind the map's bounds (viewport) property to the autocomplete object,
					// so that the autocomplete requests use the current map bounds for the
					// bounds option in the request.
					autocomplete.bindTo('bounds', map);

					var infowindow = new google.maps.InfoWindow();
					var infowindowContent = document.getElementById('infowindow-content');
					infowindow.setContent(infowindowContent);
					var marker = new google.maps.Marker({
					  map: map,
					  anchorPoint: new google.maps.Point(0, -29)
					});

					autocomplete.addListener('place_changed', function() {
					  infowindow.close();
					  marker.setVisible(false);
					  var place = autocomplete.getPlace();
					  
					  if (!place.geometry) {
						// User entered the name of a Place that was not suggested and
						// pressed the Enter key, or the Place Details request failed.
						window.alert("No details available for input: '" + place.name + "'");
						return;
					  }

					  // If the place has a geometry, then present it on a map.
					  if (place.geometry.viewport) {
						map.fitBounds(place.geometry.viewport);
					  } else {
						map.setCenter(place.geometry.location);
						map.setZoom(17);  // Why 17? Because it looks good.
					  }
					
					  marker.setPosition(place.geometry.location);
					  marker.setVisible(true);

					  var address = '';
					  if (place.address_components) {
						address = [
						  (place.address_components[0] && place.address_components[0].short_name || ','),
						  (place.address_components[1] && place.address_components[1].short_name || ','),
						  (place.address_components[2] && place.address_components[2].short_name || ',')
						].join(',');
					  }
					
					for (var i = 0; i < place.address_components.length; i++) {
					  var addressType = place.address_components[i].types[0];
					  
					  if(addressType == 'street_number'){
						var street_number = place.address_components[i].short_name;
					  }
					  
					  if(addressType == 'neighborhood'){
						var neighborhood = place.address_components[i].short_name;
					  }
					  
					  if(addressType == 'route'){
						var address_1 = place.address_components[i].short_name;
					  }

					  if(addressType == 'sublocality_level_1'){
						var locality = place.address_components[i].short_name;
					  }
					  
					  if(addressType == 'sublocality_level_2'){
						var locality2 = place.address_components[i].short_name;
					  }
					  
					  if(addressType == 'locality'){
							$('#input-shipping-city').val(place.address_components[i].short_name); 
					  }
					  if(addressType == 'postal_code'){
						  $('#input-shipping-postcode').val(place.address_components[i].short_name); 
					  }
					  
					  if(addressType == 'country'){
						  
						  $.ajax({
								url: 'index.php?route=extension/googlelookup/getcountry&countryname=' + place.address_components[i].long_name,
								dataType: 'json',
								success: function(json) {
									if(json['country']){
										$('#input-shipping-country').val(json['country']['country_id']); 
										$('#input-shipping-country').trigger('change'); 
									}
								},
							});
						}
						
						if(addressType == 'administrative_area_level_1'){
						   $.ajax({
								url: 'index.php?route=extension/googlelookup/getzone&zonename=' + place.address_components[i].long_name,
								dataType: 'json',
								success: function(json) {
									if(json['zone']){
										setTimeout(function(){
											$('#input-shipping-zone').val(json['zone']['zone_id']); 
											$('#input-shipping-zone').trigger('change'); 
										},1000);
										
									}
								},
							});
					  }
					 }
					 if(street_number == undefined){
						var street_number = '';
					 }else{
						 var street_number = street_number + ', ';
					 }
					 
					 
					 if(neighborhood == undefined){
						var neighborhood = '';
					 }else{
						 var neighborhood = neighborhood + ', ';
					 }
					 
					 if(address_1 == undefined){
						var address_1 = '';
					 }else{
						 var address_1 = address_1 + ', ';
					 }
					 
					  if(locality2 == undefined){
						var locality2 = '';
					 }else{
						 var locality2 = locality2 + ', ';
					 }
					 
					 if(locality == undefined){
						var locality = '';
					 }
					 
					 $('#input-shipping-address-1').val(street_number + neighborhood + address_1 + locality2 + locality);
					
					  
					  infowindowContent.children['place-name'].textContent = place.name;
					  infowindowContent.children['place-address'].textContent = address;
					  infowindow.open(map, marker);
					});

				  }
				</script>
				<script src="https://maps.googleapis.com/maps/api/js?key={{ module_google_lookup_apikey }}&libraries=places&callback=initshippingMap"
					async defer></script>
			{% endif %}
			]]></add>
		</operation>
	</file>
</modification>